# nixpacks.toml

# Specify the environment variables required during the build phase.
[variables]
# This addresses the ERR_OSSL_EVP_UNSUPPORTED issue with Node.js 17+ and older build tools.
NODE_OPTIONS = "--openssl-legacy-provider"

# Specify the Node.js version
# Using an LTS version like Node.js 18 is a good balance for stability and modern features.
# If you explicitly need Node.js 22, you can change "nodejs-18_x" to "nodejs-22_x".
# However, be aware that very old `react-scripts` versions might have other issues with Node.js 22.
[phases.setup]
nixPkgs = ["nodejs-16_x"] # This tells Nixpacks to use Node.js 18.x from Nixpkgs.

# Define the build command
[phases.build]
# The standard build command for Create React App projects.
# Nixpacks will automatically run `npm install` before this if it detects a package.json.
cmd = "npm run build"

# Define the start command for serving the built application.
# For React frontend applications, `npm run build` creates static files
# in the `build/` directory. Platforms like Coolify often automatically
# detect and serve these static files (e.g., using Nginx).
# Therefore, you might not need a 'start' command explicitly defined here,
# as the platform handles serving the static output of the build.
# If Coolify later complains about a missing start command, or you want to use
# a specific Node.js-based static server (like `serve`), you would add a section like this:
# [start]
# cmd = "npx serve -s build -l $PORT"
# (Note: For `npx serve`, 'serve' would need to be a dependency in your package.json,
# or included via nixPkgs if available in Nix.)
